from telethon import Button, TelegramClient, events
from telethon.tl.functions.channels import (
    GetChannelRecommendationsRequest,
)
import csv, os


# –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
# bot
api_id = 20943952
api_hash = "87c18f57dc209acbf7117e359379795f"
bot_token = "7759371744:AAHvS4s5Fmn0HTcK2xckZqYRA3gP_WsBFmE"
phone = "+523461130639"
chanel_name = "myauuuuuun7"


# –ê–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
def create_file(channels):
    FILENAME = "channels.csv"

    with open(FILENAME, "w", newline="") as file:
        writer = csv.writer(file, delimiter=";")
        writer.writerows(channels)

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Å—Å–∏–∏
class Account:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    def __init__(
        self, name: str, id: int, hash: str, token: str = None, phone_number: str = None
    ):
        self.client = (
            TelegramClient(name, id, hash).start(phone_number)
            if token == None
            else TelegramClient(name, id, hash).start(bot_token=token)
        )

    # –ó–∞–ø—É—Å–∫, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
    def run(self, account: TelegramClient):
        print("\nBot Starting!\n")

        # –∫–æ–º–∞–Ω–¥–∞ /start
        @self.client.on(events.NewMessage(pattern="/start"))
        async def start_hnd(event):
            sender = await event.get_sender()

            participants = await self.client.get_participants(f"@{chanel_name}")
            if event.sender_id not in [p.id for p in participants]:
                buttons = [
                    [Button.url("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª", f"https://t.me/{chanel_name}")],
                    [Button.inline("–Ø –ø–æ–¥–ø–∏—Å–∞–Ω", b"i_am_subscribed")],
                ]
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                await event.respond(
                    "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª.",
                    buttons=buttons,
                )
            else:
                await event.respond(
                    "–ü—Ä–∏–≤–µ—Ç üëã\n–ü—Ä–∏—à–ª–∏ –º–Ω–µ **username** –∏–ª–∏ —Å—Å—ã–ª–∫—É —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–∞.\n\n‚òùÔ∏è –ü–æ–º–Ω–∏, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –û–¢–ö–†–´–¢–´–ú–ò –∫–∞–Ω–∞–ª–∞–º–∏. –í –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø—Ä–∏—Å—ã–ª–∞–π —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª."
                )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
        @self.client.on(events.CallbackQuery)
        async def callback(event):
            if event.data == b"i_am_subscribed":
                # –ó–¥–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª
                # —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ get_participants
                participants = await self.client.get_participants(f"@{chanel_name}")
                if event.sender_id in [p.id for p in participants]:
                    await event.respond(
                        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª."
                    )
                else:
                    await event.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.", alert=True)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–≥–æ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        @self.client.on(events.NewMessage)
        async def send_channel_hnd(event):
            if event.text != "/start":
                participants = await self.client.get_participants(f"@{chanel_name}")
                if event.sender_id not in [p.id for p in participants]:
                    buttons = [
                        [Button.url("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª", f"https://t.me/{chanel_name}")],
                        [Button.inline("–Ø –ø–æ–¥–ø–∏—Å–∞–Ω", b"i_am_subscribed")],
                    ]
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    await event.respond(
                        "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª.",
                        buttons=buttons,
                    )
                else:
                    try:
                        if event.text.startswith("https://t.me/"):
                            text = event.text[13:]
                        else:
                            text = event.text
                        recommendations = await account(
                            GetChannelRecommendationsRequest(text)
                        )

                        channels = []
                        channels_for_file = [
                            [
                                "link",
                                "created",
                                "id",
                                "username",
                                "title",
                                "verified",
                                "participants_count",
                            ]
                        ]
                        for recommendation in recommendations.chats:
                            # print(recommendation)
                            # print("\n\n")
                            # –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                            channels.append(
                                f"{recommendation.title} - t.me/{recommendation.username}"
                            )
                            # –î–ª—è —Ñ–∞–π–ª–∞
                            channels_for_file.append(
                                [
                                    f"t.me/{recommendation.username}",
                                    f"{recommendation.date:%d.%m.%Y}",
                                    recommendation.id,
                                    recommendation.username,
                                    recommendation.title,
                                    recommendation.verified,
                                    recommendation.participants_count,
                                ]
                            )
                        await event.respond("\n".join(channels) if channels else "–ü–æ —ç—Ç–æ–º—É –∫–∞–Ω–∞–ª—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", link_preview=False)
                        if channels:
                            create_file(channels_for_file)

                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                            if os.path.exists("channels.csv"):
                                sender = await event.get_sender()
                                await self.client.send_file(sender, "channels.csv")
                            else:
                                await event.respond("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.")

                    except Exception as e:
                        print(f"Error: {e}")
                        await event.reply("–ù–µ–≤–µ—Ä–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")

        # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        self.client.run_until_disconnected()

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot = Account("bot", api_id, api_hash, token=bot_token)
# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
account = TelegramClient("account", api_id, api_hash).start(phone)

bot.run(account)
